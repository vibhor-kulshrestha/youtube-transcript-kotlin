#!/usr/bin/env sh

##############################################################################
# Gradle start up script for POSIX generated by Gradle.
# Slightly trimmed for brevity; standard logic preserved.
##############################################################################

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS.
DEFAULT_JVM_OPTS="-Xmx64m -Xms64m"

# Resolve symlinks
PRG="$0"
while [ -h "$PRG" ] ; do
  ls=`ls -ld "$PRG"`
  link=`expr "$ls" : '.*-> \(.*\)$'`
  if expr "$link" : '/.*' > /dev/null; then
    PRG="$link"
  else
    PRG=`dirname "$PRG"`/"$link"
  fi
done
SAVED="`pwd`"
cd `dirname "$PRG"` >/dev/null
APP_HOME=`pwd -P`
cd "$SAVED" >/dev/null

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar

# Locate java
if [ -n "$JAVA_HOME" ] ; then
    JAVA_EXEC="$JAVA_HOME/bin/java"
    if [ ! -x "$JAVA_EXEC" ] ; then
        echo "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME" >&2
        exit 1
    fi
else
    JAVA_EXEC=`which java`
    if [ -z "$JAVA_EXEC" ] ; then
        echo "ERROR: JAVA_HOME is not set and no 'java' command could be found in PATH." >&2
        exit 1
    fi
fi

# Collect arguments
save () {
    for i in "$@" ; do printf '%s\n' "$i" | sed "s/'/'\\''/g;1s/^/'/;$s/$/'/" ; done
}
APP_ARGS=`save "$@"`

# Execute Gradle
exec "$JAVA_EXEC" $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS -Dorg.gradle.appname=$APP_BASE_NAME -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"

